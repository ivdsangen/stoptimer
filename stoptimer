#!/usr/local/bin/python3
#
# Author: Ivo van der Sangen

config_enabled = False
config = ()
try:
    import configparser
    config = configparser.ConfigParser()
    config_enabled = True
except:
    try:
        import ConfigParser
        config = ConfigParser.ConfigParser()
        config_enabled = True
    except:
        print('no module configparser or ConfigParser found, not loading ini file')

import curses
import getopt
import os
import signal
import struct
import sys
import threading
import time

global maxx
global maxy
global out
global save_to_file
global set_time
global start_time
global state
global stop_time
global _win
global lock

class StopTimerException(Exception):
    pass

def getTerminalSize():
    terminal_size = os.get_terminal_size()
    return terminal_size[0], terminal_size[1]

def set(mins):

    global set_time
    global state

    try:
        mins = int(mins)
    except ValueError:
        raise StopTimerException('s : enter time in minutes')
    set_time = 60 * mins

    state = 'off'

def start():

    global set_time
    global start_time
    global state

    if state != 'stopped':
        start_time = time.time()
    else:
        set_time += time.time() - stop_time
    state = 'on'

def stop():

    global state
    global stop_time

    stop_time = time.time()
    state = 'stopped'

def inc(mins):

    global set_time

    try:
        mins = int(mins)
    except ValueError:
        raise StopTimerException('+ : enter time in minutes')
    set_time += 60 * mins

def dec(mins):

    global set_time

    try:
        mins = int(mins)
    except ValueError:
        raise StopTimerException('- : enter time in minutes')
        set_time -= 60 * mins

def save():
  
    f = open(STOPTIMER_SAVE_FILE, 'w')
    f.write(str(set_time) + '\n')
    f.write(str(start_time) + '\n')
    f.write(str(stop_time) + '\n')
    f.close()

def load():
  
    global set_time
    global start_time
    global state
    global stop_time

    f = open(STOPTIMER_SAVE_FILE, 'r')
    set_time = float(f.readline())
    start_time = float(f.readline())
    stop_time = float(f.readline())
    f.close()

    state = 'stopped'

def fmt(t):
    t = int(t)
    secs = (t % 60)
    mins = (int(t/60)%60)
    hours = int(t/3600)
  
    s = ''
    s += str(hours) + ':'
    if mins < 10:
        s += '0'
    s += str(mins) + ':'
    if secs < 10:
        s += '0'
    s += str(secs)
    return s

def prstr_center(win, y, s):

    global maxy
    global maxx
    global lock

    while lock:
        sleep(.1)

    if y >= maxy:
        return
    if len(s) >= maxx:
        return
    
    win.addstr(int(y), int(maxx/2 - len(s)/2), s)

def display_update(win):

    global out
    global maxy

    while not(out):

        win.erase()

        cy = maxy/2

        if state != 'off':
            left = set_time - (time.time()-start_time)
            done = left < 0
            if done:
                prstr_center(win, cy, 'Done')
            elif state == 'stopped':
                prstr_center(
                    win,
                    cy,
                    ('Stopped ' + fmt(left + time.time() - stop_time))
                )
            else:
                prstr_center(win, cy, fmt(left))
        else:
            prstr_center(win, cy, 'Off '+ fmt(set_time))
    
        prstr_center(win, cy+2, 'Space - Start/stop countdown')
        prstr_center(win, cy+3, 'q - Exit')
        prstr_center(win, cy+4, 'sN - \'s\' then a number to (re)set minutes')
        prstr_center(win, cy+5, '+N - \'+\' then a number to increase minutes')
        prstr_center(win, cy+6, '-N - \'-\' then a number to decrease minutes')
    
        win.refresh()

        time.sleep(.1)

def main_update(win):

    global out
    global maxx
    global maxy
    global lock

    while not(out):

        cy, cx = maxy, 0

        try:

            c = win.getch(cy-1, cx)
            if c == ord('s'):
                s = win.getstr(cy-1, cx+1, 128)
                set(s)
            elif c == 32:
                start() if state != 'on' else stop()
            elif c == ord('+'):
                s = win.getstr(cy-1,cx+1, 128)
                inc(s)
            elif c == ord('-'):
                s = win.getstr(cy-1,cx+1, 128)
                dec(s)
            elif c == 27:
                if save_to_file:
                    stop()
                    save()
                    start()
            elif c == ord('q'):
                out = True
            elif c == curses.KEY_RESIZE:
                lock = True
                maxy, maxx = win.getmaxyx()
                curses.resize_term(maxy, maxx)
                win.clear()
                win.refresh()
                lock = False
            else:
                curses.beep()
   
        except StopTimerException:
            pass

def outf():

    global out

    stop()
    if save_to_file:
        save()
    out = True
 

def sigint_handler(signal, frame):

    outf()

def sighub_handler(signal, frame):
  
    outf()

def run(win):

    global maxx
    global maxy
    global out
    global set_time
    global state
    global _win
    global lock

    _win = win

    try:
        curses.curs_set(0)
        curses.use_default_colors()
    except Exception:
        pass

    maxy, maxx = win.getmaxyx()

    display_thread = threading.Thread(target=display_update,args=(win,))
    main_thread = threading.Thread(target=main_update,args=(win,))

    display_thread.start()
    main_thread.start()

    while 1:
        if out:
            outf()
            curses.nocbreak()
            win.keypad(False)
            curses.echo()
            curses.endwin()
            return
        time.sleep(.1)

def conf_err(msg):
    print ('config: ' + msg)
    sys.exit(1)

def usage():
    print(USAGE)
    sys.exit(2)

lock=False
out = False
set_time = 0
state ='off'
auto = False
load_from_file = True
save_to_file = True
start_time = time.time()
stop_time = start_time

HOME = os.path.expanduser("~")
CONFIG_DIR = HOME + '/.config'
STOPTIMER_CONFIG_DIR = CONFIG_DIR + '/stoptimer'
STOPTIMER_CONFIG_FILE = STOPTIMER_CONFIG_DIR + '/stoptimer.ini'
STOPTIMER_SAVE_FILE = STOPTIMER_CONFIG_DIR + '/save'

if not(os.path.isdir(STOPTIMER_CONFIG_DIR)):
    if not(os.path.isdir(CONFIG_DIR)):
        os.mkdir(CONFIG_DIR, 0o755)
    os.mkdir(STOPTIMER_CONFIG_DIR, 0o755)

load_c = '-1'
time_c = -1

if config_enabled and os.path.isfile(STOPTIMER_CONFIG_FILE):
    config.read(STOPTIMER_CONFIG_FILE)
    try:
        auto_c = config.get('Main', 'auto')
        if auto_c == '1':
            auto = True
        elif auto_c != '0':
            conf_err('value for auto must be 0 or 1')
    except Exception:
        pass
    try:
        time_c = int(config.get('Main', 'time'))
        set(time_c)
    except ValueError:
        conf_err('value for time must be integer')
    except Exception:
        pass
    try:
        load_c = config.get('Main', 'load')
        if load_c == '0':
            load_from_file = False
        elif load_c != '1':
            conf_err('value for load must be 0 or 1')
    except Exception:
        pass
    try:
        save_c = config.get('Main', 'save')
        if save_c == '0':
            save_to_file = False
        elif save_c != '1':
            conf_err('value for save must be 0 or 1')
    except Exception:
        pass
    if time_c != -1 and load_c == '1':
        conf_err('can not set both time and load from file in config')
elif os.path.isfile(STOPTIMER_CONFIG_FILE) and not(config_enabled):
    print('warning: no module configparser or ConfigParser found, not loading ini file')

USAGE = """USAGE: stoptimer
    [-h ] - get this message
    [-a | --auto flag ] - start automatically on startup (default: 0)
    [-t | --time minutes ] - set the countdown time in minutes (default: 0)
    [-l | --load flag ] - load from file (default: 1)
    [-s | --save flag ] - save to file (default: 1)"""

try:

    time_p = False
    load_p = -1

    if len(sys.argv) > 1:
        opts, args = getopt.getopt(
            sys.argv[1:],
            'ha:t:l:s:',
            [ "auto=", "time=", "load=", "save=" ]
        )
        for opt, arg in opts:
            if opt in [ "-h"]:
                usage()
            elif opt in [ "-a", "--auto"]:
                if arg == '1':
                    auto = True
                elif arg == '0':
                    auto = False
                else:
                    usage()
            elif opt in [ "-t", "--time"]:
                mins = 0
                try:
                    mins = int(arg)
                except ValueError:
                    usage()
                set(mins)
                time_p = True
            elif opt in [ "-l", "--load"]:
                if arg == '0':
                    load_p = 0
                    load_from_file = False
                elif arg == '1':
                    load_from_file = True
                    load_p = 1
                else:
                    usage()
            elif opt in [ "-s", "--save"]:
                if arg == '0':
                    save_to_file = False
                elif arg == '1':
                    save_to_file = True
                else:
                    print(usage())
            else:
                print('Unrecognized option')
                usage()
  
    if load_p == 1 and time_p:
        print("""Can not use time supplied and load time from disk at the same time.""")
        sys.exit(3)

    if time_c == -1 and not(time_p) and load_from_file and os.path.isfile(STOPTIMER_SAVE_FILE):
        load()

    if time_c != -1 and load_from_file:
        print('Warning: not loading from file due to time set in configuration')
    
    if auto:
        start()   

        
except Exception as e:
    usage()

signal.signal(signal.SIGINT, sigint_handler)
signal.signal(signal.SIGHUP, sighub_handler)

curses.wrapper(run)
